import * as caniuse from "caniuse-api";
import type { FontFormat } from "./types";
import browserslist from "browserslist";
import fs from "fs";

export const getMapping = (): Record<FontFormat, Record<string, boolean>> => {
    const formatToFeature = new Map<FontFormat, string>([
        ["svg", "svg-fonts"],
        ["ttf", "ttf"],
        ["eot", "eot"],
        ["woff", "woff"],
        ["woff2", "woff2"],
    ]);
    const browsersList = browserslist("> 0%").reverse();

    return browsersList.reduce((acc: Record<FontFormat, Record<string, boolean>>, browserVersion: string) => {
        formatToFeature.forEach((feature, format) => {
            if (caniuse.isSupported(feature, browserVersion)) {
                acc[format][browserVersion] = true;
            }
        });

        return acc;
    }, {
        svg: {},
        ttf: {},
        eot: {},
        woff: {},
        woff2: {},
    });
};

export const generate = (): void => {
    fs.writeFileSync("src/data.ts", `// generated by generate.ts
import { FontFormat } from "./types";
const data: Record<FontFormat, Record<string, boolean>> = ${JSON.stringify(getMapping(), null, 2)};
export default data;
`);
};

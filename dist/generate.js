"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.getMapping = void 0;
const caniuse = __importStar(require("caniuse-api"));
const browserslist_1 = __importDefault(require("browserslist"));
const fs_1 = __importDefault(require("fs"));
const getMapping = () => {
    const formatToFeature = new Map([
        ["svg", "svg-fonts"],
        ["ttf", "ttf"],
        ["eot", "eot"],
        ["woff", "woff"],
        ["woff2", "woff2"],
    ]);
    const browsersList = (0, browserslist_1.default)("> 0%").reverse();
    return browsersList.reduce((acc, browserVersion) => {
        formatToFeature.forEach((feature, format) => {
            if (caniuse.isSupported(feature, browserVersion)) {
                acc[format][browserVersion] = true;
            }
        });
        return acc;
    }, {
        svg: {},
        ttf: {},
        eot: {},
        woff: {},
        woff2: {},
    });
};
exports.getMapping = getMapping;
const generate = () => {
    fs_1.default.writeFileSync("src/data.ts", `// generated by generate.ts
import { FontFormat } from "./types";
const data: Record<FontFormat, Record<string, boolean>> = ${JSON.stringify((0, exports.getMapping)(), null, 2)};
export default data;
`);
};
exports.generate = generate;
